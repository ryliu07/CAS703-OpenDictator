/*
 * generated by Xtext 2.34.0
 */
package org.xtext.example.openDictatorDsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.openDictatorDsl.ide.contentassist.antlr.internal.InternalOpenDictatorDslParser;
import org.xtext.example.openDictatorDsl.services.OpenDictatorDslGrammarAccess;

public class OpenDictatorDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(OpenDictatorDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, OpenDictatorDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getStatementOperatorAccess().getAlternatives(), "rule__StatementOperator__Alternatives");
			builder.put(grammarAccess.getEvaluationOperatorAccess().getAlternatives(), "rule__EvaluationOperator__Alternatives");
			builder.put(grammarAccess.getPolicyAccess().getGroup(), "rule__Policy__Group__0");
			builder.put(grammarAccess.getStatementSetAccess().getGroup(), "rule__StatementSet__Group__0");
			builder.put(grammarAccess.getStatementSetAccess().getGroup_4(), "rule__StatementSet__Group_4__0");
			builder.put(grammarAccess.getStatementSetAccess().getGroup_4_3(), "rule__StatementSet__Group_4_3__0");
			builder.put(grammarAccess.getStatementSetAccess().getGroup_8(), "rule__StatementSet__Group_8__0");
			builder.put(grammarAccess.getInputFileAccess().getGroup(), "rule__InputFile__Group__0");
			builder.put(grammarAccess.getStatementAccess().getGroup(), "rule__Statement__Group__0");
			builder.put(grammarAccess.getStatementAccess().getGroup_4(), "rule__Statement__Group_4__0");
			builder.put(grammarAccess.getStatementAccess().getGroup_4_3(), "rule__Statement__Group_4_3__0");
			builder.put(grammarAccess.getJsonQueryAccess().getGroup(), "rule__JsonQuery__Group__0");
			builder.put(grammarAccess.getValueAccess().getGroup(), "rule__Value__Group__0");
			builder.put(grammarAccess.getPolicyAccess().getFailureMessageAssignment_3(), "rule__Policy__FailureMessageAssignment_3");
			builder.put(grammarAccess.getPolicyAccess().getSuccessMessageAssignment_5(), "rule__Policy__SuccessMessageAssignment_5");
			builder.put(grammarAccess.getPolicyAccess().getIdAssignment_7(), "rule__Policy__IdAssignment_7");
			builder.put(grammarAccess.getPolicyAccess().getStatementsetAssignment_9(), "rule__Policy__StatementsetAssignment_9");
			builder.put(grammarAccess.getPolicyAccess().getInputfileAssignment_11(), "rule__Policy__InputfileAssignment_11");
			builder.put(grammarAccess.getStatementSetAccess().getStatementOperatorAssignment_3(), "rule__StatementSet__StatementOperatorAssignment_3");
			builder.put(grammarAccess.getStatementSetAccess().getStatementsetAssignment_4_2(), "rule__StatementSet__StatementsetAssignment_4_2");
			builder.put(grammarAccess.getStatementSetAccess().getStatementsetAssignment_4_3_1(), "rule__StatementSet__StatementsetAssignment_4_3_1");
			builder.put(grammarAccess.getStatementSetAccess().getStatementAssignment_7(), "rule__StatementSet__StatementAssignment_7");
			builder.put(grammarAccess.getStatementSetAccess().getStatementAssignment_8_1(), "rule__StatementSet__StatementAssignment_8_1");
			builder.put(grammarAccess.getInputFileAccess().getFileLocationAssignment_3(), "rule__InputFile__FileLocationAssignment_3");
			builder.put(grammarAccess.getStatementAccess().getEvaluationOperatorAssignment_3(), "rule__Statement__EvaluationOperatorAssignment_3");
			builder.put(grammarAccess.getStatementAccess().getPrefixEvaluationOperatorAssignment_4_2(), "rule__Statement__PrefixEvaluationOperatorAssignment_4_2");
			builder.put(grammarAccess.getStatementAccess().getPrefixEvaluationOperatorAssignment_4_3_1(), "rule__Statement__PrefixEvaluationOperatorAssignment_4_3_1");
			builder.put(grammarAccess.getStatementAccess().getJsonqueryAssignment_6(), "rule__Statement__JsonqueryAssignment_6");
			builder.put(grammarAccess.getStatementAccess().getValueAssignment_8(), "rule__Statement__ValueAssignment_8");
			builder.put(grammarAccess.getJsonQueryAccess().getQueryStringAssignment_3(), "rule__JsonQuery__QueryStringAssignment_3");
			builder.put(grammarAccess.getValueAccess().getTypeAssignment_3(), "rule__Value__TypeAssignment_3");
			builder.put(grammarAccess.getValueAccess().getValueAssignment_5(), "rule__Value__ValueAssignment_5");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private OpenDictatorDslGrammarAccess grammarAccess;

	@Override
	protected InternalOpenDictatorDslParser createParser() {
		InternalOpenDictatorDslParser result = new InternalOpenDictatorDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public OpenDictatorDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(OpenDictatorDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
