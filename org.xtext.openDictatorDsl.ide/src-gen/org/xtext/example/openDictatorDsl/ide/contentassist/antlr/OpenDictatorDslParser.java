/*
 * generated by Xtext 2.34.0
 */
package org.xtext.example.openDictatorDsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.openDictatorDsl.ide.contentassist.antlr.internal.InternalOpenDictatorDslParser;
import org.xtext.example.openDictatorDsl.services.OpenDictatorDslGrammarAccess;

public class OpenDictatorDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(OpenDictatorDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, OpenDictatorDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getStatementOperatorAccess().getAlternatives(), "rule__StatementOperator__Alternatives");
			builder.put(grammarAccess.getEvaluationOperatorAccess().getAlternatives(), "rule__EvaluationOperator__Alternatives");
			builder.put(grammarAccess.getPolicyAccess().getGroup(), "rule__Policy__Group__0");
			builder.put(grammarAccess.getStatementSetAccess().getGroup(), "rule__StatementSet__Group__0");
			builder.put(grammarAccess.getStatementSetAccess().getGroup_2(), "rule__StatementSet__Group_2__0");
			builder.put(grammarAccess.getStatementSetAccess().getGroup_2_1(), "rule__StatementSet__Group_2_1__0");
			builder.put(grammarAccess.getStatementSetAccess().getGroup_4(), "rule__StatementSet__Group_4__0");
			builder.put(grammarAccess.getStatementSetAccess().getGroup_5(), "rule__StatementSet__Group_5__0");
			builder.put(grammarAccess.getStatementSetAccess().getGroup_5_2(), "rule__StatementSet__Group_5_2__0");
			builder.put(grammarAccess.getStatementAccess().getGroup(), "rule__Statement__Group__0");
			builder.put(grammarAccess.getValueAccess().getGroup(), "rule__Value__Group__0");
			builder.put(grammarAccess.getPolicyAccess().getIdAssignment_1(), "rule__Policy__IdAssignment_1");
			builder.put(grammarAccess.getPolicyAccess().getFailureMessageAssignment_3(), "rule__Policy__FailureMessageAssignment_3");
			builder.put(grammarAccess.getPolicyAccess().getSuccessMessageAssignment_5(), "rule__Policy__SuccessMessageAssignment_5");
			builder.put(grammarAccess.getPolicyAccess().getInputfileAssignment_7(), "rule__Policy__InputfileAssignment_7");
			builder.put(grammarAccess.getPolicyAccess().getStatementsetAssignment_10(), "rule__Policy__StatementsetAssignment_10");
			builder.put(grammarAccess.getStatementSetAccess().getStatementOperatorAssignment_0(), "rule__StatementSet__StatementOperatorAssignment_0");
			builder.put(grammarAccess.getStatementSetAccess().getStatementsetAssignment_2_0(), "rule__StatementSet__StatementsetAssignment_2_0");
			builder.put(grammarAccess.getStatementSetAccess().getStatementsetAssignment_2_1_1(), "rule__StatementSet__StatementsetAssignment_2_1_1");
			builder.put(grammarAccess.getStatementSetAccess().getStatementAssignment_3(), "rule__StatementSet__StatementAssignment_3");
			builder.put(grammarAccess.getStatementSetAccess().getStatementAssignment_4_1(), "rule__StatementSet__StatementAssignment_4_1");
			builder.put(grammarAccess.getStatementSetAccess().getStatementsetAssignment_5_1(), "rule__StatementSet__StatementsetAssignment_5_1");
			builder.put(grammarAccess.getStatementSetAccess().getStatementsetAssignment_5_2_1(), "rule__StatementSet__StatementsetAssignment_5_2_1");
			builder.put(grammarAccess.getInputFileAccess().getFileLocationAssignment(), "rule__InputFile__FileLocationAssignment");
			builder.put(grammarAccess.getStatementAccess().getPrefixEvaluationOperatorAssignment_0(), "rule__Statement__PrefixEvaluationOperatorAssignment_0");
			builder.put(grammarAccess.getStatementAccess().getJsonqueryAssignment_1(), "rule__Statement__JsonqueryAssignment_1");
			builder.put(grammarAccess.getStatementAccess().getEvaluationOperatorAssignment_2(), "rule__Statement__EvaluationOperatorAssignment_2");
			builder.put(grammarAccess.getStatementAccess().getValueAssignment_3(), "rule__Statement__ValueAssignment_3");
			builder.put(grammarAccess.getJsonQueryAccess().getQueryStringAssignment(), "rule__JsonQuery__QueryStringAssignment");
			builder.put(grammarAccess.getValueAccess().getTypeAssignment_1(), "rule__Value__TypeAssignment_1");
			builder.put(grammarAccess.getValueAccess().getValueAssignment_4(), "rule__Value__ValueAssignment_4");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private OpenDictatorDslGrammarAccess grammarAccess;

	@Override
	protected InternalOpenDictatorDslParser createParser() {
		InternalOpenDictatorDslParser result = new InternalOpenDictatorDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public OpenDictatorDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(OpenDictatorDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
