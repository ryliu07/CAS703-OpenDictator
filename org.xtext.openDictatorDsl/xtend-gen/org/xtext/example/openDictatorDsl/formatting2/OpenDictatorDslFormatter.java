/**
 * generated by Xtext 2.34.0
 */
package org.xtext.example.openDictatorDsl.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import openDictator.InputFile;
import openDictator.Policy;
import openDictator.Statement;
import openDictator.StatementSet;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.xtext.example.openDictatorDsl.services.OpenDictatorDslGrammarAccess;

@SuppressWarnings("all")
public class OpenDictatorDslFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private OpenDictatorDslGrammarAccess _openDictatorDslGrammarAccess;

  protected void _format(final Policy policy, @Extension final IFormattableDocument document) {
    document.<StatementSet>format(policy.getStatementset());
    document.<InputFile>format(policy.getInputfile());
  }

  protected void _format(final StatementSet statementSet, @Extension final IFormattableDocument document) {
    EList<StatementSet> _statementset = statementSet.getStatementset();
    for (final StatementSet _statementSet : _statementset) {
      document.<StatementSet>format(_statementSet);
    }
    EList<Statement> _statement = statementSet.getStatement();
    for (final Statement statement : _statement) {
      document.<Statement>format(statement);
    }
  }

  public void format(final Object policy, final IFormattableDocument document) {
    if (policy instanceof XtextResource) {
      _format((XtextResource)policy, document);
      return;
    } else if (policy instanceof Policy) {
      _format((Policy)policy, document);
      return;
    } else if (policy instanceof StatementSet) {
      _format((StatementSet)policy, document);
      return;
    } else if (policy instanceof EObject) {
      _format((EObject)policy, document);
      return;
    } else if (policy == null) {
      _format((Void)null, document);
      return;
    } else if (policy != null) {
      _format(policy, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(policy, document).toString());
    }
  }
}
