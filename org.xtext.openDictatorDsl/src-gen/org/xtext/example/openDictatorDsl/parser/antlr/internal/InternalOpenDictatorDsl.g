/*
 * generated by Xtext 2.34.0
 */
grammar InternalOpenDictatorDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.openDictatorDsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.openDictatorDsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.openDictatorDsl.services.OpenDictatorDslGrammarAccess;

}

@parser::members {

 	private OpenDictatorDslGrammarAccess grammarAccess;

    public InternalOpenDictatorDslParser(TokenStream input, OpenDictatorDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Policy";
   	}

   	@Override
   	protected OpenDictatorDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRulePolicy
entryRulePolicy returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPolicyRule()); }
	iv_rulePolicy=rulePolicy
	{ $current=$iv_rulePolicy.current; }
	EOF;

// Rule Policy
rulePolicy returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Id'
		{
			newLeafNode(otherlv_0, grammarAccess.getPolicyAccess().getIdKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPolicyAccess().getIdEStringParserRuleCall_1_0());
				}
				lv_id_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPolicyRule());
					}
					set(
						$current,
						"id",
						lv_id_1_0,
						"org.xtext.example.openDictatorDsl.OpenDictatorDsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='FailureMessage'
		{
			newLeafNode(otherlv_2, grammarAccess.getPolicyAccess().getFailureMessageKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPolicyAccess().getFailureMessageEStringParserRuleCall_3_0());
				}
				lv_FailureMessage_3_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPolicyRule());
					}
					set(
						$current,
						"FailureMessage",
						lv_FailureMessage_3_0,
						"org.xtext.example.openDictatorDsl.OpenDictatorDsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='SuccessMessage'
		{
			newLeafNode(otherlv_4, grammarAccess.getPolicyAccess().getSuccessMessageKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPolicyAccess().getSuccessMessageEStringParserRuleCall_5_0());
				}
				lv_SuccessMessage_5_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPolicyRule());
					}
					set(
						$current,
						"SuccessMessage",
						lv_SuccessMessage_5_0,
						"org.xtext.example.openDictatorDsl.OpenDictatorDsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='FileLocation'
		{
			newLeafNode(otherlv_6, grammarAccess.getPolicyAccess().getFileLocationKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPolicyAccess().getInputfileInputFileParserRuleCall_7_0());
				}
				lv_inputfile_7_0=ruleInputFile
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPolicyRule());
					}
					set(
						$current,
						"inputfile",
						lv_inputfile_7_0,
						"org.xtext.example.openDictatorDsl.OpenDictatorDsl.InputFile");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_8='Policy'
		{
			newLeafNode(otherlv_8, grammarAccess.getPolicyAccess().getPolicyKeyword_8());
		}
		otherlv_9='{'
		{
			newLeafNode(otherlv_9, grammarAccess.getPolicyAccess().getLeftCurlyBracketKeyword_9());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPolicyAccess().getStatementsetStatementSetParserRuleCall_10_0());
				}
				lv_statementset_10_0=ruleStatementSet
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPolicyRule());
					}
					set(
						$current,
						"statementset",
						lv_statementset_10_0,
						"org.xtext.example.openDictatorDsl.OpenDictatorDsl.StatementSet");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_11='}'
		{
			newLeafNode(otherlv_11, grammarAccess.getPolicyAccess().getRightCurlyBracketKeyword_11());
		}
	)
;

// Entry rule entryRuleStatementSet
entryRuleStatementSet returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementSetRule()); }
	iv_ruleStatementSet=ruleStatementSet
	{ $current=$iv_ruleStatementSet.current; }
	EOF;

// Rule StatementSet
ruleStatementSet returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementSetAccess().getStatementOperatorStatementOperatorEnumRuleCall_0_0());
				}
				lv_statementOperator_0_0=ruleStatementOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementSetRule());
					}
					set(
						$current,
						"statementOperator",
						lv_statementOperator_0_0,
						"org.xtext.example.openDictatorDsl.OpenDictatorDsl.StatementOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='['
		{
			newLeafNode(otherlv_1, grammarAccess.getStatementSetAccess().getLeftSquareBracketKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getStatementSetAccess().getStatementsetStatementSetParserRuleCall_2_0_0());
					}
					lv_statementset_2_0=ruleStatementSet
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStatementSetRule());
						}
						add(
							$current,
							"statementset",
							lv_statementset_2_0,
							"org.xtext.example.openDictatorDsl.OpenDictatorDsl.StatementSet");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getStatementSetAccess().getCommaKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getStatementSetAccess().getStatementsetStatementSetParserRuleCall_2_1_1_0());
						}
						lv_statementset_4_0=ruleStatementSet
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getStatementSetRule());
							}
							add(
								$current,
								"statementset",
								lv_statementset_4_0,
								"org.xtext.example.openDictatorDsl.OpenDictatorDsl.StatementSet");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_5=','
			{
				newLeafNode(otherlv_5, grammarAccess.getStatementSetAccess().getCommaKeyword_2_2());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementSetAccess().getStatementStatementParserRuleCall_3_0());
				}
				lv_statement_6_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementSetRule());
					}
					add(
						$current,
						"statement",
						lv_statement_6_0,
						"org.xtext.example.openDictatorDsl.OpenDictatorDsl.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_7=','
			{
				newLeafNode(otherlv_7, grammarAccess.getStatementSetAccess().getCommaKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getStatementSetAccess().getStatementStatementParserRuleCall_4_1_0());
					}
					lv_statement_8_0=ruleStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStatementSetRule());
						}
						add(
							$current,
							"statement",
							lv_statement_8_0,
							"org.xtext.example.openDictatorDsl.OpenDictatorDsl.Statement");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		(
			otherlv_9=','
			{
				newLeafNode(otherlv_9, grammarAccess.getStatementSetAccess().getCommaKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getStatementSetAccess().getStatementsetStatementSetParserRuleCall_5_1_0());
					}
					lv_statementset_10_0=ruleStatementSet
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStatementSetRule());
						}
						add(
							$current,
							"statementset",
							lv_statementset_10_0,
							"org.xtext.example.openDictatorDsl.OpenDictatorDsl.StatementSet");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_11=','
				{
					newLeafNode(otherlv_11, grammarAccess.getStatementSetAccess().getCommaKeyword_5_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getStatementSetAccess().getStatementsetStatementSetParserRuleCall_5_2_1_0());
						}
						lv_statementset_12_0=ruleStatementSet
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getStatementSetRule());
							}
							add(
								$current,
								"statementset",
								lv_statementset_12_0,
								"org.xtext.example.openDictatorDsl.OpenDictatorDsl.StatementSet");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_13=']'
		{
			newLeafNode(otherlv_13, grammarAccess.getStatementSetAccess().getRightSquareBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleInputFile
entryRuleInputFile returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInputFileRule()); }
	iv_ruleInputFile=ruleInputFile
	{ $current=$iv_ruleInputFile.current; }
	EOF;

// Rule InputFile
ruleInputFile returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getInputFileAccess().getFileLocationEStringParserRuleCall_0());
			}
			lv_fileLocation_0_0=ruleEString
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getInputFileRule());
				}
				set(
					$current,
					"fileLocation",
					lv_fileLocation_0_0,
					"org.xtext.example.openDictatorDsl.OpenDictatorDsl.EString");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementAccess().getPrefixEvaluationOperatorEvaluationOperatorEnumRuleCall_0_0());
				}
				lv_prefixEvaluationOperator_0_0=ruleEvaluationOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementRule());
					}
					add(
						$current,
						"prefixEvaluationOperator",
						lv_prefixEvaluationOperator_0_0,
						"org.xtext.example.openDictatorDsl.OpenDictatorDsl.EvaluationOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementAccess().getJsonqueryJsonQueryParserRuleCall_1_0());
				}
				lv_jsonquery_1_0=ruleJsonQuery
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementRule());
					}
					set(
						$current,
						"jsonquery",
						lv_jsonquery_1_0,
						"org.xtext.example.openDictatorDsl.OpenDictatorDsl.JsonQuery");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementAccess().getEvaluationOperatorEvaluationOperatorEnumRuleCall_2_0());
				}
				lv_evaluationOperator_2_0=ruleEvaluationOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementRule());
					}
					set(
						$current,
						"evaluationOperator",
						lv_evaluationOperator_2_0,
						"org.xtext.example.openDictatorDsl.OpenDictatorDsl.EvaluationOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementAccess().getValueValueParserRuleCall_3_0());
				}
				lv_value_3_0=ruleValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementRule());
					}
					set(
						$current,
						"value",
						lv_value_3_0,
						"org.xtext.example.openDictatorDsl.OpenDictatorDsl.Value");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleJsonQuery
entryRuleJsonQuery returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJsonQueryRule()); }
	iv_ruleJsonQuery=ruleJsonQuery
	{ $current=$iv_ruleJsonQuery.current; }
	EOF;

// Rule JsonQuery
ruleJsonQuery returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getJsonQueryAccess().getQueryStringEStringParserRuleCall_0());
			}
			lv_queryString_0_0=ruleEString
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getJsonQueryRule());
				}
				set(
					$current,
					"queryString",
					lv_queryString_0_0,
					"org.xtext.example.openDictatorDsl.OpenDictatorDsl.EString");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleValue
entryRuleValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getValueRule()); }
	iv_ruleValue=ruleValue
	{ $current=$iv_ruleValue.current; }
	EOF;

// Rule Value
ruleValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='type='
		{
			newLeafNode(otherlv_0, grammarAccess.getValueAccess().getTypeKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getValueAccess().getTypeEStringParserRuleCall_1_0());
				}
				lv_type_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getValueRule());
					}
					set(
						$current,
						"type",
						lv_type_1_0,
						"org.xtext.example.openDictatorDsl.OpenDictatorDsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=','
		{
			newLeafNode(otherlv_2, grammarAccess.getValueAccess().getCommaKeyword_2());
		}
		otherlv_3='value='
		{
			newLeafNode(otherlv_3, grammarAccess.getValueAccess().getValueKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getValueAccess().getValueEStringParserRuleCall_4_0());
				}
				lv_value_4_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getValueRule());
					}
					set(
						$current,
						"value",
						lv_value_4_0,
						"org.xtext.example.openDictatorDsl.OpenDictatorDsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Rule StatementOperator
ruleStatementOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='AND'
			{
				$current = grammarAccess.getStatementOperatorAccess().getANDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getStatementOperatorAccess().getANDEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='OR'
			{
				$current = grammarAccess.getStatementOperatorAccess().getOREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getStatementOperatorAccess().getOREnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='NOT'
			{
				$current = grammarAccess.getStatementOperatorAccess().getNOTEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getStatementOperatorAccess().getNOTEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule EvaluationOperator
ruleEvaluationOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='FORSOME'
			{
				$current = grammarAccess.getEvaluationOperatorAccess().getFORSOMEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getEvaluationOperatorAccess().getFORSOMEEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='FORALL'
			{
				$current = grammarAccess.getEvaluationOperatorAccess().getFORALLEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getEvaluationOperatorAccess().getFORALLEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='CONTAINS'
			{
				$current = grammarAccess.getEvaluationOperatorAccess().getCONTAINSEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getEvaluationOperatorAccess().getCONTAINSEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='EQUALS'
			{
				$current = grammarAccess.getEvaluationOperatorAccess().getEQUALSEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getEvaluationOperatorAccess().getEQUALSEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='LARGERTHAN'
			{
				$current = grammarAccess.getEvaluationOperatorAccess().getLARGERTHANEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getEvaluationOperatorAccess().getLARGERTHANEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='SMALLERTHAN'
			{
				$current = grammarAccess.getEvaluationOperatorAccess().getSMALLERTHANEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getEvaluationOperatorAccess().getSMALLERTHANEnumLiteralDeclaration_5());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
