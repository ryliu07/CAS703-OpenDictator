/*
 * generated by Xtext 2.34.0
 */
package org.xtext.example.openDictatorDsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class OpenDictatorDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class PolicyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.openDictatorDsl.OpenDictatorDsl.Policy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPolicyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cFailureMessageKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFailureMessageAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFailureMessageEStringParserRuleCall_3_0 = (RuleCall)cFailureMessageAssignment_3.eContents().get(0);
		private final Keyword cSuccessMessageKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSuccessMessageAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSuccessMessageEStringParserRuleCall_5_0 = (RuleCall)cSuccessMessageAssignment_5.eContents().get(0);
		private final Keyword cIdKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cIdAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cIdEStringParserRuleCall_7_0 = (RuleCall)cIdAssignment_7.eContents().get(0);
		private final Keyword cStatementsetKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cStatementsetAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cStatementsetStatementSetParserRuleCall_9_0 = (RuleCall)cStatementsetAssignment_9.eContents().get(0);
		private final Keyword cInputfileKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cInputfileAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cInputfileInputFileParserRuleCall_11_0 = (RuleCall)cInputfileAssignment_11.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//Policy returns Policy:
		//    'Policy'
		//    '{'
		//        'FailureMessage' FailureMessage=EString
		//        'SuccessMessage' SuccessMessage=EString
		//        'id' id=EString
		//        'statementset' statementset=StatementSet
		//        'inputfile' inputfile=InputFile
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Policy'
		//'{'
		//    'FailureMessage' FailureMessage=EString
		//    'SuccessMessage' SuccessMessage=EString
		//    'id' id=EString
		//    'statementset' statementset=StatementSet
		//    'inputfile' inputfile=InputFile
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Policy'
		public Keyword getPolicyKeyword_0() { return cPolicyKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'FailureMessage'
		public Keyword getFailureMessageKeyword_2() { return cFailureMessageKeyword_2; }
		
		//FailureMessage=EString
		public Assignment getFailureMessageAssignment_3() { return cFailureMessageAssignment_3; }
		
		//EString
		public RuleCall getFailureMessageEStringParserRuleCall_3_0() { return cFailureMessageEStringParserRuleCall_3_0; }
		
		//'SuccessMessage'
		public Keyword getSuccessMessageKeyword_4() { return cSuccessMessageKeyword_4; }
		
		//SuccessMessage=EString
		public Assignment getSuccessMessageAssignment_5() { return cSuccessMessageAssignment_5; }
		
		//EString
		public RuleCall getSuccessMessageEStringParserRuleCall_5_0() { return cSuccessMessageEStringParserRuleCall_5_0; }
		
		//'id'
		public Keyword getIdKeyword_6() { return cIdKeyword_6; }
		
		//id=EString
		public Assignment getIdAssignment_7() { return cIdAssignment_7; }
		
		//EString
		public RuleCall getIdEStringParserRuleCall_7_0() { return cIdEStringParserRuleCall_7_0; }
		
		//'statementset'
		public Keyword getStatementsetKeyword_8() { return cStatementsetKeyword_8; }
		
		//statementset=StatementSet
		public Assignment getStatementsetAssignment_9() { return cStatementsetAssignment_9; }
		
		//StatementSet
		public RuleCall getStatementsetStatementSetParserRuleCall_9_0() { return cStatementsetStatementSetParserRuleCall_9_0; }
		
		//'inputfile'
		public Keyword getInputfileKeyword_10() { return cInputfileKeyword_10; }
		
		//inputfile=InputFile
		public Assignment getInputfileAssignment_11() { return cInputfileAssignment_11; }
		
		//InputFile
		public RuleCall getInputfileInputFileParserRuleCall_11_0() { return cInputfileInputFileParserRuleCall_11_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
	}
	public class StatementSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.openDictatorDsl.OpenDictatorDsl.StatementSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStatementSetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cStatementOperatorKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementOperatorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementOperatorStatementOperatorEnumRuleCall_3_0 = (RuleCall)cStatementOperatorAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cStatementsetKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cStatementsetAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cStatementsetStatementSetParserRuleCall_4_2_0 = (RuleCall)cStatementsetAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cStatementsetAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cStatementsetStatementSetParserRuleCall_4_3_1_0 = (RuleCall)cStatementsetAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Keyword cStatementKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cStatementAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cStatementStatementParserRuleCall_7_0 = (RuleCall)cStatementAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cCommaKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cStatementAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cStatementStatementParserRuleCall_8_1_0 = (RuleCall)cStatementAssignment_8_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//StatementSet returns StatementSet:
		//    'StatementSet'
		//    '{'
		//        'statementOperator' statementOperator=StatementOperator
		//        ('statementset' '{' statementset+=StatementSet ( "," statementset+=StatementSet)* '}' )?
		//        'statement' '{' statement+=Statement ( "," statement+=Statement)* '}'
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'StatementSet'
		//'{'
		//    'statementOperator' statementOperator=StatementOperator
		//    ('statementset' '{' statementset+=StatementSet ( "," statementset+=StatementSet)* '}' )?
		//    'statement' '{' statement+=Statement ( "," statement+=Statement)* '}'
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'StatementSet'
		public Keyword getStatementSetKeyword_0() { return cStatementSetKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'statementOperator'
		public Keyword getStatementOperatorKeyword_2() { return cStatementOperatorKeyword_2; }
		
		//statementOperator=StatementOperator
		public Assignment getStatementOperatorAssignment_3() { return cStatementOperatorAssignment_3; }
		
		//StatementOperator
		public RuleCall getStatementOperatorStatementOperatorEnumRuleCall_3_0() { return cStatementOperatorStatementOperatorEnumRuleCall_3_0; }
		
		//('statementset' '{' statementset+=StatementSet ( "," statementset+=StatementSet)* '}' )?
		public Group getGroup_4() { return cGroup_4; }
		
		//'statementset'
		public Keyword getStatementsetKeyword_4_0() { return cStatementsetKeyword_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }
		
		//statementset+=StatementSet
		public Assignment getStatementsetAssignment_4_2() { return cStatementsetAssignment_4_2; }
		
		//StatementSet
		public RuleCall getStatementsetStatementSetParserRuleCall_4_2_0() { return cStatementsetStatementSetParserRuleCall_4_2_0; }
		
		//( "," statementset+=StatementSet)*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//statementset+=StatementSet
		public Assignment getStatementsetAssignment_4_3_1() { return cStatementsetAssignment_4_3_1; }
		
		//StatementSet
		public RuleCall getStatementsetStatementSetParserRuleCall_4_3_1_0() { return cStatementsetStatementSetParserRuleCall_4_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }
		
		//'statement'
		public Keyword getStatementKeyword_5() { return cStatementKeyword_5; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//statement+=Statement
		public Assignment getStatementAssignment_7() { return cStatementAssignment_7; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_7_0() { return cStatementStatementParserRuleCall_7_0; }
		
		//( "," statement+=Statement)*
		public Group getGroup_8() { return cGroup_8; }
		
		//","
		public Keyword getCommaKeyword_8_0() { return cCommaKeyword_8_0; }
		
		//statement+=Statement
		public Assignment getStatementAssignment_8_1() { return cStatementAssignment_8_1; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_8_1_0() { return cStatementStatementParserRuleCall_8_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}
	public class InputFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.openDictatorDsl.OpenDictatorDsl.InputFile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInputFileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cFileLocationKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFileLocationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFileLocationEStringParserRuleCall_3_0 = (RuleCall)cFileLocationAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//InputFile returns InputFile:
		//    'InputFile'
		//    '{'
		//        'fileLocation' fileLocation=EString
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'InputFile'
		//'{'
		//    'fileLocation' fileLocation=EString
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'InputFile'
		public Keyword getInputFileKeyword_0() { return cInputFileKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'fileLocation'
		public Keyword getFileLocationKeyword_2() { return cFileLocationKeyword_2; }
		
		//fileLocation=EString
		public Assignment getFileLocationAssignment_3() { return cFileLocationAssignment_3; }
		
		//EString
		public RuleCall getFileLocationEStringParserRuleCall_3_0() { return cFileLocationEStringParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.openDictatorDsl.OpenDictatorDsl.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.openDictatorDsl.OpenDictatorDsl.Statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStatementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cEvaluationOperatorKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEvaluationOperatorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEvaluationOperatorEvaluationOperatorEnumRuleCall_3_0 = (RuleCall)cEvaluationOperatorAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cPrefixEvaluationOperatorKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cPrefixEvaluationOperatorAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cPrefixEvaluationOperatorEvaluationOperatorEnumRuleCall_4_2_0 = (RuleCall)cPrefixEvaluationOperatorAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cPrefixEvaluationOperatorAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cPrefixEvaluationOperatorEvaluationOperatorEnumRuleCall_4_3_1_0 = (RuleCall)cPrefixEvaluationOperatorAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Keyword cJsonqueryKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cJsonqueryAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cJsonqueryJsonQueryParserRuleCall_6_0 = (RuleCall)cJsonqueryAssignment_6.eContents().get(0);
		private final Keyword cValueKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cValueAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cValueValueParserRuleCall_8_0 = (RuleCall)cValueAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Statement returns Statement:
		//    'Statement'
		//    '{'
		//        'evaluationOperator' evaluationOperator=EvaluationOperator
		//        ('prefixEvaluationOperator' '{' prefixEvaluationOperator+=EvaluationOperator ( "," prefixEvaluationOperator+=EvaluationOperator)* '}' )?
		//        'jsonquery' jsonquery=JsonQuery
		//        'value' value=Value
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Statement'
		//'{'
		//    'evaluationOperator' evaluationOperator=EvaluationOperator
		//    ('prefixEvaluationOperator' '{' prefixEvaluationOperator+=EvaluationOperator ( "," prefixEvaluationOperator+=EvaluationOperator)* '}' )?
		//    'jsonquery' jsonquery=JsonQuery
		//    'value' value=Value
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Statement'
		public Keyword getStatementKeyword_0() { return cStatementKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'evaluationOperator'
		public Keyword getEvaluationOperatorKeyword_2() { return cEvaluationOperatorKeyword_2; }
		
		//evaluationOperator=EvaluationOperator
		public Assignment getEvaluationOperatorAssignment_3() { return cEvaluationOperatorAssignment_3; }
		
		//EvaluationOperator
		public RuleCall getEvaluationOperatorEvaluationOperatorEnumRuleCall_3_0() { return cEvaluationOperatorEvaluationOperatorEnumRuleCall_3_0; }
		
		//('prefixEvaluationOperator' '{' prefixEvaluationOperator+=EvaluationOperator ( "," prefixEvaluationOperator+=EvaluationOperator)* '}' )?
		public Group getGroup_4() { return cGroup_4; }
		
		//'prefixEvaluationOperator'
		public Keyword getPrefixEvaluationOperatorKeyword_4_0() { return cPrefixEvaluationOperatorKeyword_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }
		
		//prefixEvaluationOperator+=EvaluationOperator
		public Assignment getPrefixEvaluationOperatorAssignment_4_2() { return cPrefixEvaluationOperatorAssignment_4_2; }
		
		//EvaluationOperator
		public RuleCall getPrefixEvaluationOperatorEvaluationOperatorEnumRuleCall_4_2_0() { return cPrefixEvaluationOperatorEvaluationOperatorEnumRuleCall_4_2_0; }
		
		//( "," prefixEvaluationOperator+=EvaluationOperator)*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//prefixEvaluationOperator+=EvaluationOperator
		public Assignment getPrefixEvaluationOperatorAssignment_4_3_1() { return cPrefixEvaluationOperatorAssignment_4_3_1; }
		
		//EvaluationOperator
		public RuleCall getPrefixEvaluationOperatorEvaluationOperatorEnumRuleCall_4_3_1_0() { return cPrefixEvaluationOperatorEvaluationOperatorEnumRuleCall_4_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }
		
		//'jsonquery'
		public Keyword getJsonqueryKeyword_5() { return cJsonqueryKeyword_5; }
		
		//jsonquery=JsonQuery
		public Assignment getJsonqueryAssignment_6() { return cJsonqueryAssignment_6; }
		
		//JsonQuery
		public RuleCall getJsonqueryJsonQueryParserRuleCall_6_0() { return cJsonqueryJsonQueryParserRuleCall_6_0; }
		
		//'value'
		public Keyword getValueKeyword_7() { return cValueKeyword_7; }
		
		//value=Value
		public Assignment getValueAssignment_8() { return cValueAssignment_8; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_8_0() { return cValueValueParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class JsonQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.openDictatorDsl.OpenDictatorDsl.JsonQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cJsonQueryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cQueryStringKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cQueryStringAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cQueryStringEStringParserRuleCall_3_0 = (RuleCall)cQueryStringAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//JsonQuery returns JsonQuery:
		//    'JsonQuery'
		//    '{'
		//        'queryString' queryString=EString
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'JsonQuery'
		//'{'
		//    'queryString' queryString=EString
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'JsonQuery'
		public Keyword getJsonQueryKeyword_0() { return cJsonQueryKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'queryString'
		public Keyword getQueryStringKeyword_2() { return cQueryStringKeyword_2; }
		
		//queryString=EString
		public Assignment getQueryStringAssignment_3() { return cQueryStringAssignment_3; }
		
		//EString
		public RuleCall getQueryStringEStringParserRuleCall_3_0() { return cQueryStringEStringParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.openDictatorDsl.OpenDictatorDsl.Value");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cValueKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTypeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeEStringParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Keyword cValueKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValueEStringParserRuleCall_5_0 = (RuleCall)cValueAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Value returns Value:
		//    'Value'
		//    '{'
		//        'type' type=EString
		//        'value' value=EString
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Value'
		//'{'
		//    'type' type=EString
		//    'value' value=EString
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Value'
		public Keyword getValueKeyword_0() { return cValueKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'type'
		public Keyword getTypeKeyword_2() { return cTypeKeyword_2; }
		
		//type=EString
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//EString
		public RuleCall getTypeEStringParserRuleCall_3_0() { return cTypeEStringParserRuleCall_3_0; }
		
		//'value'
		public Keyword getValueKeyword_4() { return cValueKeyword_4; }
		
		//value=EString
		public Assignment getValueAssignment_5() { return cValueAssignment_5; }
		
		//EString
		public RuleCall getValueEStringParserRuleCall_5_0() { return cValueEStringParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	
	public class StatementOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.openDictatorDsl.OpenDictatorDsl.StatementOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cANDANDKeyword_0_0 = (Keyword)cANDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cORORKeyword_1_0 = (Keyword)cOREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cNOTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cNOTNOTKeyword_2_0 = (Keyword)cNOTEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum StatementOperator returns StatementOperator:
		//                AND = 'AND' | OR = 'OR' | NOT = 'NOT';
		public EnumRule getRule() { return rule; }
		
		//AND = 'AND' | OR = 'OR' | NOT = 'NOT'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AND = 'AND'
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration_0() { return cANDEnumLiteralDeclaration_0; }
		
		//'AND'
		public Keyword getANDANDKeyword_0_0() { return cANDANDKeyword_0_0; }
		
		//OR = 'OR'
		public EnumLiteralDeclaration getOREnumLiteralDeclaration_1() { return cOREnumLiteralDeclaration_1; }
		
		//'OR'
		public Keyword getORORKeyword_1_0() { return cORORKeyword_1_0; }
		
		//NOT = 'NOT'
		public EnumLiteralDeclaration getNOTEnumLiteralDeclaration_2() { return cNOTEnumLiteralDeclaration_2; }
		
		//'NOT'
		public Keyword getNOTNOTKeyword_2_0() { return cNOTNOTKeyword_2_0; }
	}
	public class EvaluationOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.openDictatorDsl.OpenDictatorDsl.EvaluationOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFORSOMEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFORSOMEFORSOMEKeyword_0_0 = (Keyword)cFORSOMEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFORALLEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFORALLFORALLKeyword_1_0 = (Keyword)cFORALLEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCONTAINSEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCONTAINSCONTAINSKeyword_2_0 = (Keyword)cCONTAINSEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cEQUALSEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cEQUALSEQUALSKeyword_3_0 = (Keyword)cEQUALSEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cLARGERTHANEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cLARGERTHANLARGERTHANKeyword_4_0 = (Keyword)cLARGERTHANEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cSMALLERTHANEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cSMALLERTHANSMALLERTHANKeyword_5_0 = (Keyword)cSMALLERTHANEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum EvaluationOperator returns EvaluationOperator:
		//                FORSOME = 'FORSOME' | FORALL = 'FORALL' | CONTAINS = 'CONTAINS' | EQUALS = 'EQUALS' | LARGERTHAN = 'LARGERTHAN' | SMALLERTHAN = 'SMALLERTHAN';
		public EnumRule getRule() { return rule; }
		
		//FORSOME = 'FORSOME' | FORALL = 'FORALL' | CONTAINS = 'CONTAINS' | EQUALS = 'EQUALS' | LARGERTHAN = 'LARGERTHAN' | SMALLERTHAN = 'SMALLERTHAN'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FORSOME = 'FORSOME'
		public EnumLiteralDeclaration getFORSOMEEnumLiteralDeclaration_0() { return cFORSOMEEnumLiteralDeclaration_0; }
		
		//'FORSOME'
		public Keyword getFORSOMEFORSOMEKeyword_0_0() { return cFORSOMEFORSOMEKeyword_0_0; }
		
		//FORALL = 'FORALL'
		public EnumLiteralDeclaration getFORALLEnumLiteralDeclaration_1() { return cFORALLEnumLiteralDeclaration_1; }
		
		//'FORALL'
		public Keyword getFORALLFORALLKeyword_1_0() { return cFORALLFORALLKeyword_1_0; }
		
		//CONTAINS = 'CONTAINS'
		public EnumLiteralDeclaration getCONTAINSEnumLiteralDeclaration_2() { return cCONTAINSEnumLiteralDeclaration_2; }
		
		//'CONTAINS'
		public Keyword getCONTAINSCONTAINSKeyword_2_0() { return cCONTAINSCONTAINSKeyword_2_0; }
		
		//EQUALS = 'EQUALS'
		public EnumLiteralDeclaration getEQUALSEnumLiteralDeclaration_3() { return cEQUALSEnumLiteralDeclaration_3; }
		
		//'EQUALS'
		public Keyword getEQUALSEQUALSKeyword_3_0() { return cEQUALSEQUALSKeyword_3_0; }
		
		//LARGERTHAN = 'LARGERTHAN'
		public EnumLiteralDeclaration getLARGERTHANEnumLiteralDeclaration_4() { return cLARGERTHANEnumLiteralDeclaration_4; }
		
		//'LARGERTHAN'
		public Keyword getLARGERTHANLARGERTHANKeyword_4_0() { return cLARGERTHANLARGERTHANKeyword_4_0; }
		
		//SMALLERTHAN = 'SMALLERTHAN'
		public EnumLiteralDeclaration getSMALLERTHANEnumLiteralDeclaration_5() { return cSMALLERTHANEnumLiteralDeclaration_5; }
		
		//'SMALLERTHAN'
		public Keyword getSMALLERTHANSMALLERTHANKeyword_5_0() { return cSMALLERTHANSMALLERTHANKeyword_5_0; }
	}
	
	private final PolicyElements pPolicy;
	private final StatementSetElements pStatementSet;
	private final InputFileElements pInputFile;
	private final EStringElements pEString;
	private final StatementOperatorElements eStatementOperator;
	private final StatementElements pStatement;
	private final EvaluationOperatorElements eEvaluationOperator;
	private final JsonQueryElements pJsonQuery;
	private final ValueElements pValue;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public OpenDictatorDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pPolicy = new PolicyElements();
		this.pStatementSet = new StatementSetElements();
		this.pInputFile = new InputFileElements();
		this.pEString = new EStringElements();
		this.eStatementOperator = new StatementOperatorElements();
		this.pStatement = new StatementElements();
		this.eEvaluationOperator = new EvaluationOperatorElements();
		this.pJsonQuery = new JsonQueryElements();
		this.pValue = new ValueElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.openDictatorDsl.OpenDictatorDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Policy returns Policy:
	//    'Policy'
	//    '{'
	//        'FailureMessage' FailureMessage=EString
	//        'SuccessMessage' SuccessMessage=EString
	//        'id' id=EString
	//        'statementset' statementset=StatementSet
	//        'inputfile' inputfile=InputFile
	//    '}';
	public PolicyElements getPolicyAccess() {
		return pPolicy;
	}
	
	public ParserRule getPolicyRule() {
		return getPolicyAccess().getRule();
	}
	
	//StatementSet returns StatementSet:
	//    'StatementSet'
	//    '{'
	//        'statementOperator' statementOperator=StatementOperator
	//        ('statementset' '{' statementset+=StatementSet ( "," statementset+=StatementSet)* '}' )?
	//        'statement' '{' statement+=Statement ( "," statement+=Statement)* '}'
	//    '}';
	public StatementSetElements getStatementSetAccess() {
		return pStatementSet;
	}
	
	public ParserRule getStatementSetRule() {
		return getStatementSetAccess().getRule();
	}
	
	//InputFile returns InputFile:
	//    'InputFile'
	//    '{'
	//        'fileLocation' fileLocation=EString
	//    '}';
	public InputFileElements getInputFileAccess() {
		return pInputFile;
	}
	
	public ParserRule getInputFileRule() {
		return getInputFileAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//enum StatementOperator returns StatementOperator:
	//                AND = 'AND' | OR = 'OR' | NOT = 'NOT';
	public StatementOperatorElements getStatementOperatorAccess() {
		return eStatementOperator;
	}
	
	public EnumRule getStatementOperatorRule() {
		return getStatementOperatorAccess().getRule();
	}
	
	//Statement returns Statement:
	//    'Statement'
	//    '{'
	//        'evaluationOperator' evaluationOperator=EvaluationOperator
	//        ('prefixEvaluationOperator' '{' prefixEvaluationOperator+=EvaluationOperator ( "," prefixEvaluationOperator+=EvaluationOperator)* '}' )?
	//        'jsonquery' jsonquery=JsonQuery
	//        'value' value=Value
	//    '}';
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//enum EvaluationOperator returns EvaluationOperator:
	//                FORSOME = 'FORSOME' | FORALL = 'FORALL' | CONTAINS = 'CONTAINS' | EQUALS = 'EQUALS' | LARGERTHAN = 'LARGERTHAN' | SMALLERTHAN = 'SMALLERTHAN';
	public EvaluationOperatorElements getEvaluationOperatorAccess() {
		return eEvaluationOperator;
	}
	
	public EnumRule getEvaluationOperatorRule() {
		return getEvaluationOperatorAccess().getRule();
	}
	
	//JsonQuery returns JsonQuery:
	//    'JsonQuery'
	//    '{'
	//        'queryString' queryString=EString
	//    '}';
	public JsonQueryElements getJsonQueryAccess() {
		return pJsonQuery;
	}
	
	public ParserRule getJsonQueryRule() {
		return getJsonQueryAccess().getRule();
	}
	
	//Value returns Value:
	//    'Value'
	//    '{'
	//        'type' type=EString
	//        'value' value=EString
	//    '}';
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
