// automatically generated by Xtext
grammar org.xtext.example.openDictatorDsl.OpenDictatorDsl with org.eclipse.xtext.common.Terminals

import "http://www.example.org/openDictator" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Policy returns Policy:
	'Policy'
	'{'
		'FailureMessage' FailureMessage=EString
		'SuccessMessage' SuccessMessage=EString
		'id' id=EString
		'statementset' statementset=StatementSet
		'inputfile' inputfile=InputFile
	'}';






StatementSet returns StatementSet:
	'StatementSet'
	'{'
		'statementOperator' statementOperator=StatementOperator
		('statementset' '{' statementset+=StatementSet ( "," statementset+=StatementSet)* '}' )?
		'statement' '{' statement+=Statement ( "," statement+=Statement)* '}' 
	'}';

InputFile returns InputFile:
	'InputFile'
	'{'
		'fileLocation' fileLocation=EString
	'}';

EString returns ecore::EString:
	STRING | ID;

enum StatementOperator returns StatementOperator:
				AND = 'AND' | OR = 'OR' | NOT = 'NOT';

Statement returns Statement:
	'Statement'
	'{'
		'evaluationOperator' evaluationOperator=EvaluationOperator
		('prefixEvaluationOperator' '{' prefixEvaluationOperator+=EvaluationOperator ( "," prefixEvaluationOperator+=EvaluationOperator)* '}' )?
		'jsonquery' jsonquery=JsonQuery
		'value' value=Value
	'}';

enum EvaluationOperator returns EvaluationOperator:
				FORSOME = 'FORSOME' | FORALL = 'FORALL' | CONTAINS = 'CONTAINS' | EQUALS = 'EQUALS' | LARGERTHAN = 'LARGERTHAN' | SMALLERTHAN = 'SMALLERTHAN';

JsonQuery returns JsonQuery:
	'JsonQuery'
	'{'
		'queryString' queryString=EString
	'}';

Value returns Value:
	'Value'
	'{'
		'type' type=EString
		'value' value=EString
	'}';
